Go_Auto: Days on Market Predictor for Vehicle Sales Optimization

Project Overview
This project predicts how many days a vehicle will stay on the market before it’s sold, using machine learning regression techniques. We’ve followed full MLOps practices—covering data versioning, model tuning, real-time predictions, containerization, and production-grade monitoring with Prometheus and Grafana.

Key Highlights:

Built with modular, maintainable code

Uses DVC for data version control and MLflow for experiment tracking

Fully containerized with Docker and Docker Compose

Integrated monitoring dashboards with Prometheus + Grafana

Team Members
1. Rohit

2. Geetika

3. Spandan Dahal

4. Jatin Dandyan

Course
CMPT-2500: Machine Learning Deployment and Software Development

Project Structure

The project follows a scalable production-ready structure:

CMPT-2500_PROJECT/
├── Data/                         # Raw and processed data
├── Documents/
│   ├── Api_Documentation/       # API and endpoint documentation
│   ├── Documentation/           # Markdown files and usage info
│   └── Read.Me                  # Main overview and highlights
├── grafana/                     # Dashboard provisioning setup
├── logs/                        # Application and training logs
├── mlartifacts/                 # Trained ML artifacts
├── mlruns/                      # MLflow experiment logs
├── models/                      # Serialized trained models
├── Predictions/                 # Sample predictions/output
├── prometheus/                  # Prometheus configuration
├── PythonNotebook/              # EDA and development notebooks
├── src/                         # Source code: train, predict, monitor
│   ├── predict_api.py           # Main Flask API app
│   ├── logging_config.py        # Logging setup
│   └── ...                      # Other Python utilities
├── Test_Cases/                  # Unit tests and model tests
├── docker-compose.yml           # Docker orchestration file
├── Dockerfile                   # Dockerfile for app container
├── Dockerfile.mlflow            # Dockerfile for MLflow container
├── Makefile                     # Automation and env setup
├── requirements.txt             # Python dependencies
└── .dvc/, .gitignore, .mlruns, etc.

Setup & Installation

Prerequisites

Python 3.7+

Docker Desktop

WSL (Ubuntu)

Git