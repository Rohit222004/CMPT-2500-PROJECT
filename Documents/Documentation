# **Deep Explanation of the Project Code**

This document explains the code and design decisions for the **Days on Market Predictor** project. The project handles data preprocessing, training, and prediction using Ridge and Linear Regression models. It also includes a Flask-based REST API and logs to both the console and files for monitoring.

---

## 1. **`preprocess.py`**

### **Purpose**  
This script handles data cleaning and feature engineering. It takes raw CSV files and converts them into a structured format ready for training.

### **DataPreprocessor Class**

- **Attributes:**
  - `file_path (str)` → Path to the raw data file.  
  - `df (pd.DataFrame)` → DataFrame holding the dataset.  

- **Methods:**
  - `load_data()`  
    - Reads CSV using `pandas.read_csv`.  
    - Prints a preview of the data (head, info, describe).  

  - `preprocess_data()`  
    - Logs duplicate rows.  
    - Replaces low `price` and `msrp` values with group means.  
    - Handles missing values using mean imputation.  
    - Encodes categorical variables.  
    - Creates `vehicle_age` from `model_year`.  
    - Extracts year, month, and day from `listing_first_date`.  

  - `save_preprocessed_data()`  
    - Saves the processed DataFrame to CSV.  

### ✅ **Design Decisions**
- Used group-based mean replacement for low prices to handle outliers.
- Created `vehicle_age` and extracted date components for better feature engineering.
- Included detailed logging to track processing steps.

---

## 2. **`train.py`**

### **Purpose**  
This script handles model training using Ridge Regression and Linear Regression. It uses cross-validation to tune hyperparameters and logs the training details using MLflow.

### **ModelTrainer Class**

- **Attributes:**
  - `preprocessed_file` → Path to the preprocessed data.  
  - `model_output_path_v1` & `model_output_path_v2` → Paths to save trained models.  
  - `test_cases_path` → Path to save test cases.  
  - `X_train`, `X_test`, `y_train`, `y_test` → Train/test splits.  
  - `best_model_v1`, `best_model_v2` → Trained models.  

- **Methods:**
  - `load_data()`  
    - Loads the preprocessed data.  

  - `prepare_dataset()`  
    - Splits data into train and test sets.  

  - `build_pipeline()`  
    - Builds a preprocessing pipeline for numeric and categorical data.  
    - Adds Ridge or Linear Regression as the regressor.  

  - `train_and_save_model()`  
    - Uses `RandomizedSearchCV` to tune hyperparameters.  
    - Logs parameters and metrics using MLflow.  
    - Saves the best model using `joblib.dump`.  

  - `train()`  
    - Trains both Ridge and Linear Regression models.  
    - Saves test cases for future use.  

### ✅ **Design Decisions**
- Ridge Regression helps with multicollinearity using L2 regularization.
- Linear Regression acts as a baseline model.
- MLflow handles experiment tracking and logging.

---

## 3. **`predict_api.py`**

### **Purpose**  
This script runs a Flask-based REST API to serve predictions in real time. 

### **Endpoints**
- **Home (`/`)**  
    - Displays an overview of the API.  
    - Shows available endpoints and input format.  

- **Health (`/CMPT-2500_PROJECT_health_status`)**  
    - Confirms that the API is running.  
    - Logs model loading status.  

- **Predict v1 (`/v1/predict1`)**  
    - Uses Ridge Regression for predictions.  

- **Predict v2 (`/v2/predict1`)**  
    - Uses Linear Regression for predictions.  

### ✅ **Design Decisions**
- Logs input and output for better debugging.
- Input validation ensures data format consistency.
- Flask app is set to listen on `0.0.0.0` to work inside Docker.

---

## 4. **Logging Configuration – `logging_config.py`**  
- Configured to:
  - Write logs to both `stdout` and `app.log` using `RotatingFileHandler`.  
  - Rotate logs when the size exceeds 10MB (up to 5 backups).  
  - Create separate loggers for `train` and `api` components.  

### **Example:**
```python
from logging_config import configure_logging

loggers = configure_logging()
logger = loggers['train']

def train_model():
    logger.info("Starting model training")
    # Training code here
    logger.info(f"Model trained successfully with accuracy: {accuracy}")
